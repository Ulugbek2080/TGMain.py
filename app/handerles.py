import sqlite3
import tracemalloc
from aiogram import F, Router
from aiogram import types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, CallbackQuery
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.keyboards import *

import app.DATA_Base as DATA_BaseTG
import app.keyboards as kb
import app.slovar as slovar

from config_data.config import Config, load_config

config: Config = load_config()
sklady = DATA_BaseTG.get_all_sklady()
user_selection = {}  # user_id -> set of selected GUIDs
router = Router()
TovariZap = config.tovari_put
lang = 'ru'


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ \nWelcome! Select a language',
        reply_markup=kb.get_language_keyboard())

@router.message(F.text.in_([
    '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫',
    'English language üá¨üáß',
    '‰∏≠Êñá üá®üá≥',
    "O'zbek tili üá∫üáø"
]))
async def language_selected(message: Message, state: FSMContext):

    text = message.text
    language_map = {
        '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫': 'ru',
        'English language üá¨üáß': 'en',
        '‰∏≠Êñá üá®üá≥': 'ch',
        "O'zbek tili üá∫üáø": 'uz'
    }
    user = message.from_user
    telegram_id = str(user.id)  # –í–∞–∂–Ω–æ: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–æ–ª–µ –≤ –±–∞–∑–µ GUID
    username = user.username or ''
    first_name = user.first_name or ''
    last_name = user.last_name or ''

    selected_lang = language_map.get(text, 'ru')
    AddLan(telegram_id, selected_lang)
    user_id = message.from_user.id
    await state.update_data(user_id=user_id, language=selected_lang)

    Result  = DATA_BaseTG.check_and_add_user(telegram_id, username, first_name, last_name)

    PolitikaBota = slovar.get_dictionary('–ü—Ä–æ—á–∏—Ç–∞—Ç—å–ü–æ–ª–∏—Ç–∏–∫—É–ë–æ—Ç–∞', selected_lang)
    reply_markup = kb.get_consent_keyboard(selected_lang)

    await message.answer(
        PolitikaBota,
        reply_markup=reply_markup)
    file_path = TovariZap
    try:
        doc = FSInputFile(file_path, filename="Offer.docx")
        await message.answer_document(document=doc)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(F.contact)
async def some_handler(message: Message, state: FSMContext):
    Dostup = Check_Client(message.contact.phone_number)
    Dostup = True
    if Dostup:
        after_auth = slovar.get_dictionary('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–ü–æ—Å–ª–µ–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', lang)
        reply_markup = kb.get_main_menu_keyboard(lang)
        await message.answer(after_auth, reply_markup=reply_markup)
    else:
        Text = slovar.get_dictionary('–ù–µ–ù–∞–π–¥–µ–Ω–ö–æ–Ω—Ç–∞–∫—Ç', lang)
        await message.answer(Text)


@router.message(F.text == slovar.get_dictionary('–°–æ–≥–ª–∞—Å–µ–Ω', lang))
async def handle_agree(message: Message, state: FSMContext):
    lang = languageUser(message.from_user.id)
    await message.answer(
        slovar.get_dictionary('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', lang),
        reply_markup=kb.get_contact_request_keyboard(lang)
    )


@router.message(F.text== slovar.get_dictionary('–ù–µ–î–∞—é–°–æ–≥–ª–∞—Å–∏—è', lang))
async def handle_disagree(message: Message, state: FSMContext):
    lang = languageUser(message.from_user.id)

    await message.answer(

        slovar.get_dictionary('–¢–µ–∫—Å—Ç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–ù–µ–î–∞–ª–°–æ–≥–ª–∞–∏—è', lang),

        reply_markup=kb.get_consent_keyboard(lang)

    )


@router.message(F.text== slovar.get_dictionary('–û—Ç—á–µ—Ç—ã', lang))
async def handle_reports(message: Message):
    lang = languageUser(message.from_user.id)

    await message.answer(

        slovar.get_dictionary('–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è', lang),

        reply_markup=kb.get_report_keyboard(lang)

    )


@router.message(F.text== slovar.get_dictionary('–°–µ—Ä–≤–∏—Å—ã', lang))
async def handle_services(message: Message):
    lang = languageUser(message.from_user.id)

    await message.answer(

        slovar.get_dictionary('–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è', lang),

        reply_markup=kb.get_services_keyboard(lang)

    )


@router.message(F.text== slovar.get_dictionary('–ù–∞–∑–∞–¥',lang))
async def handle_back(message: Message):
    lang = languageUser(message.from_user.id)

    await message.answer(

        slovar.get_dictionary('–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è', lang),

        reply_markup=kb.get_main_menu_keyboard(lang)

    )

@router.message(F.text== slovar.get_dictionary('–ü–æ–º–æ—â—å–û–ø–µ—Ä–∞—Ç–æ—Ä–∞', lang))
async def handle_operator_help(message: Message):
    await message.bot.send_contact(
        chat_id=message.chat.id,
        phone_number=config.phone,
        first_name=config.first_name,
    )
    #–¢–æ–≤–∞—Ä—ã

def get_kods_from_db(user_id: int) -> list[str]:
    conn = DATA_BaseTG.get_connection()  # –∏–ª–∏ pyodbc.connect(...)
    cursor = conn.cursor()

    cursor.execute("SELECT –ö–æ–¥ FROM TelegramChats WHERE –ò–î = ?", (str(user_id),))
    rows = cursor.fetchall()

    conn.close()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–¥–æ–≤
    kods = [row[0] for row in rows if row[0] is not None]
    return kods

@router.message(F.text== slovar.get_dictionary('–¢–æ–≤–∞—Ä—ã–í–ü—É—Ç–∏', lang))
async def handle_goods_on_the_way(message: Message):
    lang = languageUser(message.from_user.id)
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤
    kods = get_kods_from_db(user_id)
    kod_buttons = get_inline_keyboard_Kod(kods)
    kod_text = slovar.get_dictionary('–í—ã–±–æ—Ä–ö–æ–¥–æ–≤', lang)
    await message.answer(kod_text, reply_markup=kod_buttons)


@router.callback_query(F.data.startswith("kod_"))
async def handle_kod_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    kod = callback.data.removeprefix("kod_")

    try:
        file_path = DATA_BaseTG.Tovari_v_Puti(int(kod))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥!
        doc = FSInputFile(file_path)

        await callback.message.answer_document(
            document=doc,
            caption=f"üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –ø—É—Ç–∏: {kod}"
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

@router.message(F.text==slovar.get_dictionary('–í—Å–µ–¢–æ–≤–∞—Ä—ã', lang))
async def handle_all_goods(message: Message, state: FSMContext):
    pdf_path = DATA_BaseTG.Vse_tovari()
    doc = FSInputFile(pdf_path)
    await message.answer_document(
        document=doc,
        caption="–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
    )

@router.message(F.text== slovar.get_dictionary('–ü—Ä–∏–±—ã–≤—à–∏–µ–¢–æ–≤–∞—Ä—ã', lang))
async def handle_arrived_goods(message: Message):
    doc = FSInputFile(DATA_BaseTG.Pribivshie_tovati())
    await message.answer_document(
        document=doc,
        caption="üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –ø—É—Ç–∏"
    )

@router.message(F.text== slovar.get_dictionary('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ–¢–æ–≤–∞—Ä—ã', lang))
async def handle_received_goods(message: Message):
    doc = FSInputFile(DATA_BaseTG.Poluchennie_tovari())
    await message.answer_document(
        document=doc,
        caption="üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –ø—É—Ç–∏"
    )

@router.message(F.text== slovar.get_dictionary('–ú–æ–∏–ö–æ–¥—ã', lang))
async def handle_my_codes(message: Message):
    await message.answer("üîê –í–∞—à–∏ –∫–æ–¥—ã:")
    # –¢–æ–≤–∞—Ä—ã

    # –°–∫–∞–ª–¥—ã
@router.message(F.text== slovar.get_dictionary('–ê–¥—Ä–µ—Å–∞–°–∫–ª–∞–¥–æ–≤', lang))
async def handle_warehouses(message: Message):
    lang = languageUser(message.from_user.id)
    await message.answer(
        slovar.get_dictionary('–¢–µ–∫—Å—Ç–î–ª—è–ê–¥—Ä–µ—Å–æ–≤–°–∫–ª–∞–¥–∞', lang),
        reply_markup=build_keyboard(message.from_user.id)
    )

@router.message(
    F.text== slovar.get_dictionary('–°–ø–∏—Å–æ–∫–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö–¢–æ–≤–∞—Ä–æ–≤', lang))
async def handle_banned_goods(message: Message):
    doc = FSInputFile(TovariZap, filename="–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.docx")
    await message.answer_document(document=doc)
    # –°–∫–∞–ª–¥—ã

#–û–±–ª–∞—Å—Ç—å —Å–ª—É–∂–µ–±–Ω–Ω—ã–µ

@router.callback_query(lambda c: c.data.startswith("Sklal_") or c.data.startswith("Sklan_"))
async def toggle_sklad(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data
    guid = data.replace("Sklal_", "").replace("Sklan_", "")

    selected = user_selection.get(user_id, set())
    if guid in selected:
        selected.remove(guid)
    else:
        selected.add(guid)
    user_selection[user_id] = selected

    await callback.message.edit_reply_markup(reply_markup=build_keyboard(user_id))
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

@router.callback_query(lambda c: c.data == "GetDataOnDedicatedWarehouses")
async def send_selected(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    selected = user_selection.get(user_id, set())

    if not selected:
        await callback.answer("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏.", show_alert=True)
        return

    selected_sklady = [s for s in sklady if s["guid"] in selected]
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∫–ª–∞–¥—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:\n\n"

    for sklad in selected_sklady:
        text = f"{sklad['name']}\n {sklad['address']}\n\n"
        await callback.message.answer(text)
    user_selection[user_id] = set()

def languageUser(id):
    lang = DATA_BaseTG.Check_lan(id)
    return lang

def AddLan(id, lang):
    lang = DATA_BaseTG.update_language_by_telegram_id(id, lang)

def Check_Client(phone_number):
    Dostup = DATA_BaseTG.check_Client(phone_number)
    return Dostup

def build_keyboard(user_id):

    builder = InlineKeyboardBuilder()
    selected = user_selection.get(user_id, set())



    for sklad in sklady:
        guid = sklad["guid"]
        name = sklad["name"]
        is_selected = guid in selected

        mark = "‚úÖ" if is_selected else "‚¨ú"
        callback_prefix = "Sklan_" if is_selected else "Sklal_"
        callback_data = callback_prefix + guid

        builder.button(text=mark, callback_data=callback_data)
        builder.button(text=name, callback_data=callback_data)

    builder.button(text="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="GetDataOnDedicatedWarehouses")
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

    return builder.as_markup()

#–ö–æ–Ω–µ—Ü–û–±–ª–∞—Å—Ç–∏