from pathlib import Path

from aiogram import F, Router
from aiogram import types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, CallbackQuery, TelegramObject
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.keyboards import *

import app.DATA_Base as DATA_BaseTG
import app.keyboards as kb
import app.slovar as slovar

from config_data.config import Config, load_config

config: Config = load_config()
sklady = DATA_BaseTG.get_all_sklady()
user_selection = {}  # user_id -> set of selected GUIDs
router = Router()
TovariZap = config.tovari_put
lang = 'ru'
user_periods: dict[int, list[tuple[int, int]]] = {}
user_id = None
last_word = "–í—Å–µ –¢–æ–≤–∞—Ä—ã"


@router.message(CommandStart())
async def cmd_start(message: Message):
    global user_id
    user_id = message.from_user.id
    await message.answer(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ \nWelcome! Select a language',
        reply_markup=kb.get_language_keyboard())

@router.message(F.text.in_([
    '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫',
    'English language üá¨üáß',
    '‰∏≠Êñá üá®üá≥',
    "O'zbek tili üá∫üáø"
]))
async def language_selected(message: Message, state: FSMContext):
    global lang, TovariZap
    text = message.text
    language_map = {
        '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫': 'ru',
        'English language üá¨üáß': 'en',
        '‰∏≠Êñá üá®üá≥': 'ch',
        "O'zbek tili üá∫üáø": 'uz'
    }

    selected_lang = language_map.get(text, 'ru')
    lang = language_map.get(text, 'ru')
    user_id = message.from_user.id
    await state.update_data(user_id=user_id, language=selected_lang)



    PolitikaBota = slovar.get_dictionary('–ü—Ä–æ—á–∏—Ç–∞—Ç—å–ü–æ–ª–∏—Ç–∏–∫—É–ë–æ—Ç–∞', selected_lang)
    reply_markup = kb.get_consent_keyboard(selected_lang)

    await message.answer(
        PolitikaBota,
        reply_markup=reply_markup)
    try:
        file_path = Path(config.tovari_put.tovari_put)
        doc = FSInputFile(file_path)
        await message.answer_document(document=doc)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(F.contact)
async def some_handler(message: Message, state: FSMContext):
    Dostup = Check_Client(message.contact.phone_number)
    Dostup = True
    if Dostup:
        user = message.from_user
        telegram_id = str(user.id)  # –í–∞–∂–Ω–æ: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–æ–ª–µ –≤ –±–∞–∑–µ GUID
        username = user.username or ''
        first_name = user.first_name or ''
        last_name = user.last_name or ''
        Result  = DATA_BaseTG.check_and_add_user(telegram_id, username, first_name, last_name, message.contact.phone_number)
        after_auth = slovar.get_dictionary('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–ü–æ—Å–ª–µ–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', lang)
        reply_markup = kb.get_main_menu_keyboard(lang)
        await message.answer(after_auth, reply_markup=reply_markup)
    else:
        Text = slovar.get_dictionary('–ù–µ–ù–∞–π–¥–µ–Ω–ö–æ–Ω—Ç–∞–∫—Ç', lang)
        await message.answer(Text)


@router.message(F.text == slovar.get_dictionary('–°–æ–≥–ª–∞—Å–µ–Ω', lang))
async def handle_agree(message: Message, state: FSMContext):

    await message.answer(
        slovar.get_dictionary('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', lang),
        reply_markup=kb.get_contact_request_keyboard(lang)
    )


@router.message(F.text== slovar.get_dictionary('–ù–µ–î–∞—é–°–æ–≥–ª–∞—Å–∏—è', lang))
async def handle_disagree(message: Message, state: FSMContext):


    await message.answer(

        slovar.get_dictionary('–¢–µ–∫—Å—Ç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–ù–µ–î–∞–ª–°–æ–≥–ª–∞–∏—è', lang),

        reply_markup=kb.get_consent_keyboard(lang)

    )


@router.message(F.text== slovar.get_dictionary('–û—Ç—á–µ—Ç—ã', lang))
async def handle_reports(message: Message):


    await message.answer(

        slovar.get_dictionary('–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è', lang),

        reply_markup=kb.get_report_keyboard(lang)

    )


@router.message(F.text== slovar.get_dictionary('–°–µ—Ä–≤–∏—Å—ã', lang))
async def handle_services(message: Message):

    await message.answer(
        slovar.get_dictionary('–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è', lang),
        reply_markup=kb.get_services_keyboard(lang)
    )


@router.message(F.text== slovar.get_dictionary('–ù–∞–∑–∞–¥',lang))
async def handle_back(message: Message):

    await message.answer(

        slovar.get_dictionary('–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è', lang),

        reply_markup=kb.get_main_menu_keyboard(lang)

    )

@router.message(F.text== slovar.get_dictionary('–ü–æ–º–æ—â—å–û–ø–µ—Ä–∞—Ç–æ—Ä–∞', lang))
async def handle_operator_help(message: Message):
    await message.bot.send_contact(
        chat_id=message.chat.id,
        phone_number=str(config.phone),
        first_name=config.first_name.first_name,
    )
    #–¢–æ–≤–∞—Ä—ã

def get_kods_from_db(user_id: int) -> list[str]:
    conn = DATA_BaseTG.get_connection()  # –∏–ª–∏ pyodbc.connect(...)
    cursor = conn.cursor()
    cursor.execute("SELECT –ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞ FROM TelegramChats WHERE –ò–¥ = ?", (user_id,))
    telefon_numbers=cursor.fetchone()
    cleaned_numbers = [number[1:] for number in telefon_numbers]
    cursor.execute("SELECT –ö–æ–¥–ö–ª–∏–µ–Ω—Ç–∞ FROM –¢–µ–ª–µ—Ñ–æ–Ω—ã–ö–ª–∏–µ–Ω—Ç–æ–≤ WHERE –¢–µ–ª–µ—Ñ–æ–Ω = ?", (cleaned_numbers))
    rows = cursor.fetchall()

    conn.close()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–¥–æ–≤
    kods = [row[0] for row in rows if row[0] is not None]
    return kods

@router.message(F.text == slovar.get_dictionary('–¢–æ–≤–∞—Ä—ã–í–ü—É—Ç–∏', lang))
async def handle_goods_on_the_way(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤
    await Otchyt('–¢–æ–≤–∞—Ä—ã–í–ü—É—Ç–∏', message)

async def Otchyt(word:str, message: TelegramObject):
    global last_word
    kods = get_kods_from_db(message.from_user.id)
    kod_buttons = get_inline_keyboard_Kod(kods)
    kod_text = slovar.get_dictionary('–í—ã–±–æ—Ä–ö–æ–¥–æ–≤', lang)
    last_word = slovar.get_dictionary(f'{word}', lang)
    await message.answer(kod_text, reply_markup=kod_buttons)

@router.callback_query(F.data.startswith("kod_"))
async def handle_kod_callback(callback: CallbackQuery):
    global last_word
    user_id = callback.from_user.id
    kod = callback.data.removeprefix("kod_")
    period = user_periods.get(user_id)
    statusi = None
    if period is None:
        if last_word== slovar.get_dictionary('–ü—Ä–∏–±—ã–≤—à–∏–µ–¢–æ–≤–∞—Ä—ã', lang):
            statusi = "5"
        elif last_word == slovar.get_dictionary('–¢–æ–≤–∞—Ä—ã–í–ü—É—Ç–∏', lang):
            statusi = "1, 2, 3, 4"
        else:
            statusi = "6"
    else:
        statusi = "1, 2, 3, 4, 5, 6"
    file_path = DATA_BaseTG.Tovari_v_Puti(int(kod), period, statusi)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥!
    doc = FSInputFile(file_path)
    caption_text = slovar.get_dictionary(last_word, lang)
    await callback.message.answer_document(
        document=doc,
        caption=f"üì¶ {caption_text}: {kod}"
    )
@router.message(F.text==slovar.get_dictionary('–í—Å–µ–¢–æ–≤–∞—Ä—ã', lang))
async def handle_all_goods(message: Message, state: FSMContext):
    current_year = datetime.now().year
    await state.update_data(selected_months=[], year=current_year)
    kb = get_period_keyboard([], current_year)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)

@router.callback_query(F.data.startswith("year_"))
async def handle_year_change(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    year = data.get("year", datetime.now().year)
    if callback.data == "year_prev":
        year -= 1
    elif callback.data == "year_next":
        year += 1
    await state.update_data(year=year)
    kb = get_period_keyboard(data.get("selected", []), year)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("month_"))
async def handle_month_select(callback: CallbackQuery, state: FSMContext):
    _, m_str, y_str = callback.data.split("_")
    month = int(m_str)
    year = int(y_str)

    data = await state.get_data()
    selected: list[tuple[int, int]] = data.get("selected", [])

    current = (year, month)

    if current in selected:
        # –£–¥–∞–ª—è–µ–º —ç—Ç—É –∫–Ω–æ–ø–∫—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥—É—é
        selected = [s for s in selected if s != current]
    elif len(selected) >= 2:
        # –ï—Å–ª–∏ —É–∂–µ 2 –≤—ã–±—Ä–∞–Ω—ã ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é
        selected = [current]
    elif len(selected) == 1:
        selected.append(current)
    else:
        selected = [current]

    await state.update_data(selected=selected)
    kb = get_period_keyboard(selected, data.get("year", datetime.now().year))
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()



@router.callback_query(F.data == "submit_period")
async def handle_submit_period(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: list[tuple[int, int]] = data.get("selected", [])

    if not selected:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", show_alert=True)
        return

    sorted_sel = sorted(selected)
    if len(sorted_sel) == 1:
        dates = [sorted_sel[0]]
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
        y1, m1 = sorted_sel[0]
        y2, m2 = sorted_sel[1]
        dates = []
        y, m = y1, m1
        while (y, m) <= (y2, m2):
            dates.append((y, m))
            if m == 12:
                m = 1
                y += 1
            else:
                m += 1

    user_id = callback.from_user.id
    user_periods[user_id] = dates
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤
    kods = get_kods_from_db(user_id)
    kod_buttons = get_inline_keyboard_Kod(kods)
    kod_text = slovar.get_dictionary('–í—ã–±–æ—Ä–ö–æ–¥–æ–≤', lang)
    await callback.message.answer(text=kod_text, reply_markup=kod_buttons)

@router.message(F.text== slovar.get_dictionary('–ü—Ä–∏–±—ã–≤—à–∏–µ–¢–æ–≤–∞—Ä—ã', lang))
async def handle_arrived_goods(message: Message):
    await Otchyt('–ü—Ä–∏–±—ã–≤—à–∏–µ–¢–æ–≤–∞—Ä—ã', message)
@router.message(F.text== slovar.get_dictionary('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ–¢–æ–≤–∞—Ä—ã', lang))
async def handle_received_goods(message: Message):
    await Otchyt('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ–¢–æ–≤–∞—Ä—ã', message)
@router.message(F.text== slovar.get_dictionary('–ú–æ–∏–ö–æ–¥—ã', lang))
async def handle_my_codes(callback: CallbackQuery):
    conn = DATA_BaseTG.get_connection()  # –∏–ª–∏ pyodbc.connect(...)
    cursor = conn.cursor()
    cursor.execute("SELECT –ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞ FROM TelegramChats WHERE –ò–¥ = ?", (user_id,))
    telefon_numbers = cursor.fetchone()
    file_path = DATA_BaseTG.MyKods(telefon_numbers)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥!
    doc = FSInputFile(file_path)

    await callback.message.answer_document(
        document=doc,
        caption=f"üì¶ {slovar.get_dictionary('–û—Ç—á–µ—Ç–ú–æ–∏–ö–æ–¥—ã', lang)}"
    )
@router.message(F.text== slovar.get_dictionary('–ê–¥—Ä–µ—Å–∞–°–∫–ª–∞–¥–æ–≤', lang))
async def handle_warehouses(message: Message):
    await message.answer(
        slovar.get_dictionary('–¢–µ–∫—Å—Ç–î–ª—è–ê–¥—Ä–µ—Å–æ–≤–°–∫–ª–∞–¥–∞', lang),
        reply_markup=build_keyboard(message.from_user.id)
    )

@router.message(
    F.text== slovar.get_dictionary('–°–ø–∏—Å–æ–∫–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö–¢–æ–≤–∞—Ä–æ–≤', lang))
async def handle_banned_goods(message: Message):
    doc = FSInputFile(str(TovariZap), filename="–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.docx")
    await message.answer_document(document=doc)
    # –°–∫–∞–ª–¥—ã

#–û–±–ª–∞—Å—Ç—å —Å–ª—É–∂–µ–±–Ω–Ω—ã–µ

@router.callback_query(lambda c: c.data.startswith("Sklal_") or c.data.startswith("Sklan_"))
async def toggle_sklad(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data
    guid = data.replace("Sklal_", "").replace("Sklan_", "")

    selected = user_selection.get(user_id, set())
    if guid in selected:
        selected.remove(guid)
    else:
        selected.add(guid)
    user_selection[user_id] = selected

    await callback.message.edit_reply_markup(reply_markup=build_keyboard(user_id))
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

@router.callback_query(lambda c: c.data == "GetDataOnDedicatedWarehouses")
async def send_selected(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    selected = user_selection.get(user_id, set())

    if not selected:
        await callback.answer("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏.", show_alert=True)
        return

    selected_sklady = [s for s in sklady if s["guid"] in selected]
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∫–ª–∞–¥—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:\n\n"

    for sklad in selected_sklady:
        text = f"{sklad['name']}\n {sklad['address']}\n\n"
        await callback.message.answer(text)
    user_selection[user_id] = set()


def Check_Client(phone_number):
    Dostup = DATA_BaseTG.check_Client(phone_number)
    return Dostup

def build_keyboard(user_id):

    builder = InlineKeyboardBuilder()
    selected = user_selection.get(user_id, set())



    for sklad in sklady:
        guid = sklad["guid"]
        name = sklad["name"]
        is_selected = guid in selected

        mark = "‚úÖ" if is_selected else "‚¨ú"
        callback_prefix = "Sklan_" if is_selected else "Sklal_"
        callback_data = callback_prefix + guid

        builder.button(text=mark, callback_data=callback_data)
        builder.button(text=name, callback_data=callback_data)

    builder.button(text="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="GetDataOnDedicatedWarehouses")
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

    return builder.as_markup()

#–ö–æ–Ω–µ—Ü–û–±–ª–∞—Å—Ç–∏