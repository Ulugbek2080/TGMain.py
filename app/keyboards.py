from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import app.slovar as slovar
import app.http_request as http_request
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


def get_language_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫"),
                KeyboardButton(text="English language üá¨üáß")
            ],
            [
                KeyboardButton(text="‰∏≠Êñá üá®üá≥"),
                KeyboardButton(text="O'zbek tili üá∫üáø")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∞"
    )
    return keyboard

def get_main_menu_keyboard(lang: str) -> ReplyKeyboardMarkup:
    text_reports = slovar.get_dictionary("–û—Ç—á–µ—Ç—ã", lang)
    text_services = slovar.get_dictionary("–°–µ—Ä–≤–∏—Å—ã", lang)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=text_reports),
                KeyboardButton(text=text_services)
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard

def get_report_keyboard(lang: str, has_high_priority: bool = True, has_medium_priority: bool = True) -> ReplyKeyboardMarkup:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    text_goods_in_transit = slovar.get_dictionary("–¢–æ–≤–∞—Ä—ã–í–ü—É—Ç–∏", lang)
    text_all_goods = slovar.get_dictionary("–í—Å–µ–¢–æ–≤–∞—Ä—ã", lang)
    text_arrived_goods = slovar.get_dictionary("–ü—Ä–∏–±—ã–≤—à–∏–µ–¢–æ–≤–∞—Ä—ã", lang)
    text_received_goods = slovar.get_dictionary("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ–¢–æ–≤–∞—Ä—ã", lang)
    text_my_codes = slovar.get_dictionary("–ú–æ–∏–ö–æ–¥—ã", lang)
    text_back = slovar.get_dictionary("–ù–∞–∑–∞–¥", lang)

    keyboard = []

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –¢–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏ + –í—Å–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    row1 = [KeyboardButton(text=text_goods_in_transit)]
    if has_high_priority:
        row1.append(KeyboardButton(text=text_all_goods))
    keyboard.append(row1)

    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ü—Ä–∏–±—ã–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã + –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    row2 = [KeyboardButton(text=text_arrived_goods)]
    if has_high_priority:
        row2.append(KeyboardButton(text=text_received_goods))
    keyboard.append(row2)

    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –ú–æ–∏ –∫–æ–¥—ã
    keyboard.append([KeyboardButton(text=text_my_codes)])

    # –ß–µ—Ç–≤—ë—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–∞–∑–∞–¥
    keyboard.append([KeyboardButton(text=text_back)])

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder=slovar.get_dictionary("–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è", lang)
    )

def get_services_keyboard(lang: str) -> ReplyKeyboardMarkup:
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    text_addresses = slovar.get_dictionary("–ê–¥—Ä–µ—Å–∞–°–∫–ª–∞–¥–æ–≤", lang)
    text_help = slovar.get_dictionary("–ü–æ–º–æ—â—å–û–ø–µ—Ä–∞—Ç–æ—Ä–∞", lang)
    text_banned =slovar.get_dictionary("–°–ø–∏—Å–æ–∫–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö–¢–æ–≤–∞—Ä–æ–≤", lang)
    text_back = slovar.get_dictionary("–ù–∞–∑–∞–¥", lang)

    keyboard = [
        [
            KeyboardButton(text=text_addresses),
            KeyboardButton(text=text_help)
        ],
        [KeyboardButton(text=text_banned)],
        [KeyboardButton(text=text_back)]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder=slovar.get_dictionary("–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è", lang)
    )

def get_consent_keyboard(lang: str) -> ReplyKeyboardMarkup:
    text_agree = slovar.get_dictionary("–°–æ–≥–ª–∞—Å–µ–Ω", lang)
    text_disagree = slovar.get_dictionary("–ù–µ–î–∞—é–°–æ–≥–ª–∞—Å–∏—è", lang)

    keyboard = [
        [
            KeyboardButton(text=text_agree),
            KeyboardButton(text=text_disagree)
        ]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder=slovar.get_dictionary("–ü—Ä–æ—á–∏—Ç–∞—Ç—å–ü–æ–ª–∏—Ç–∏–∫—É–ë–æ—Ç–∞", lang)
    )

def get_inline_keyboard_sklad() -> InlineKeyboardMarkup:
    #data = http_request.get_http_skladi()
    #build_keyboard
    return True


def get_inline_keyboard_MyCodes() -> InlineKeyboardMarkup:
    data = http_request.get_http_MyCodes()
    return InlineKeyboardMarkup(inline_keyboard=data)

async def build_date_selection_keyboard(user_input: str, state: FSMContext, lang: str) -> InlineKeyboardMarkup:
    data = await state.get_data()
    selected_dates = data.get("selected_dates", [])

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –≥–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    current_year = datetime.today().year
    current_month = datetime.today().month

    if user_input.startswith("YearL_") or user_input.startswith("YearR_") or user_input.startswith("YearY_"):
        base_date = datetime.strptime(user_input.split("_")[1], "%Y%m%d")
        if "YearL_" in user_input:
            current_year = base_date.year - 1
        elif "YearR_" in user_input:
            current_year = base_date.year + 1
        else:
            current_year = base_date.year

    # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –≥–æ–¥ –∏ —Å—Ç—Ä–µ–ª–∫–∏
    year_row = [
        create_inline_button("<", f"YearL_{current_year}0101"),
        create_inline_button(str(current_year), f"YearY_{current_year}0101"),
        create_inline_button(">", f"YearR_{current_year}0101")
    ]

    # –ú–µ—Å—è—Ü—ã
    month_buttons = []
    for month in range(1, 13):
        date_code = f"{current_year}{month:02}01"
        readable_date = datetime(current_year, month, 1)
        month_name = slovar.get_dictionary(readable_date.strftime("%B"), lang)

        if date_code in selected_dates:
            text = f"‚úÖ {month_name}"
            callback_data = f"TimM_{date_code}"  # –£–±–∏—Ä–∞–µ–º
        else:
            text = month_name
            callback_data = f"TimN_{date_code}"  # –î–æ–±–∞–≤–ª—è–µ–º

        month_buttons.append(create_inline_button(text, callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    month_rows = [month_buttons[i:i+3] for i in range(0, len(month_buttons), 3)]

    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å"
    finish_text = slovar.get_dictionary("–°–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", lang)
    finish_button = [create_inline_button(finish_text, "Sformirovat_")]

    return InlineKeyboardMarkup(
        inline_keyboard=[year_row] + month_rows + [finish_button]
    )

def create_inline_button(text: str, callback_data: str) -> InlineKeyboardButton:
    return InlineKeyboardButton(text=text, callback_data=callback_data)

async def handle_month_selection(callback_data: str, state: FSMContext):
    data = await state.get_data()
    selected_dates = set(data.get("selected_dates", []))

    if callback_data.startswith("TimM_"):  # —É–±—Ä–∞—Ç—å
        date_str = callback_data.replace("TimM_", "")
        selected_dates.discard(date_str)
    elif callback_data.startswith("TimN_"):  # –¥–æ–±–∞–≤–∏—Ç—å
        date_str = callback_data.replace("TimN_", "")
        selected_dates.add(date_str)

    # –û–±–Ω–æ–≤–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_dates=list(selected_dates))

def get_contact_request_keyboard(lang: str) -> ReplyKeyboardMarkup:
    contact_text = slovar.get_dictionary("–ö–Ω–æ–ø–∫–∞–û—Ç–ø—Ä–∞–≤–∫–∞–ù–æ–º–µ—Ä–∞–¢–µ–ª–µ—Ñ–æ–Ω–∞", lang)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=contact_text, request_contact=True)
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder=contact_text
    )
    return keyboard

def get_inline_keyboard_Kod(kods) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(kod), callback_data=f"kod_{kod}")] for kod in kods
    ])
    return keyboard


