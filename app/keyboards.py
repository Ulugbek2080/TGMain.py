from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import app.slovar as slovar
import app.http_request as http_request
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


def get_language_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫"),
                KeyboardButton(text="English language üá¨üáß")
            ],
            [
                KeyboardButton(text="‰∏≠Êñá üá®üá≥"),
                KeyboardButton(text="O'zbek tili üá∫üáø")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∞"
    )
    return keyboard

def get_main_menu_keyboard(lang: str) -> ReplyKeyboardMarkup:
    text_reports = slovar.get_dictionary("–û—Ç—á–µ—Ç—ã", lang)
    text_services = slovar.get_dictionary("–°–µ—Ä–≤–∏—Å—ã", lang)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=text_reports),
                KeyboardButton(text=text_services)
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard

def get_report_keyboard(lang: str, has_high_priority: bool = True, has_medium_priority: bool = True) -> ReplyKeyboardMarkup:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    text_goods_in_transit = slovar.get_dictionary("–¢–æ–≤–∞—Ä—ã–í–ü—É—Ç–∏", lang)
    text_all_goods = slovar.get_dictionary("–í—Å–µ–¢–æ–≤–∞—Ä—ã", lang)
    text_arrived_goods = slovar.get_dictionary("–ü—Ä–∏–±—ã–≤—à–∏–µ–¢–æ–≤–∞—Ä—ã", lang)
    text_received_goods = slovar.get_dictionary("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ–¢–æ–≤–∞—Ä—ã", lang)
    text_my_codes = slovar.get_dictionary("–ú–æ–∏–ö–æ–¥—ã", lang)
    text_back = slovar.get_dictionary("–ù–∞–∑–∞–¥", lang)

    keyboard = []

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –¢–æ–≤–∞—Ä—ã –≤ –ø—É—Ç–∏ + –í—Å–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    row1 = [KeyboardButton(text=text_goods_in_transit)]
    if has_high_priority:
        row1.append(KeyboardButton(text=text_all_goods))
    keyboard.append(row1)

    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ü—Ä–∏–±—ã–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã + –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    row2 = [KeyboardButton(text=text_arrived_goods)]
    if has_high_priority:
        row2.append(KeyboardButton(text=text_received_goods))
    keyboard.append(row2)

    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –ú–æ–∏ –∫–æ–¥—ã
    keyboard.append([KeyboardButton(text=text_my_codes)])

    # –ß–µ—Ç–≤—ë—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–∞–∑–∞–¥
    keyboard.append([KeyboardButton(text=text_back)])

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder=slovar.get_dictionary("–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è", lang)
    )

def get_services_keyboard(lang: str) -> ReplyKeyboardMarkup:
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    text_addresses = slovar.get_dictionary("–ê–¥—Ä–µ—Å–∞–°–∫–ª–∞–¥–æ–≤", lang)
    text_help = slovar.get_dictionary("–ü–æ–º–æ—â—å–û–ø–µ—Ä–∞—Ç–æ—Ä–∞", lang)
    text_banned =slovar.get_dictionary("–°–ø–∏—Å–æ–∫–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö–¢–æ–≤–∞—Ä–æ–≤", lang)
    text_back = slovar.get_dictionary("–ù–∞–∑–∞–¥", lang)

    keyboard = [
        [
            KeyboardButton(text=text_addresses),
            KeyboardButton(text=text_help)
        ],
        [KeyboardButton(text=text_banned)],
        [KeyboardButton(text=text_back)]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder=slovar.get_dictionary("–í—ã–±–æ—Ä–î–µ–π—Å—Ç–≤–∏—è", lang)
    )

def get_consent_keyboard(lang: str) -> ReplyKeyboardMarkup:
    text_agree = slovar.get_dictionary("–°–æ–≥–ª–∞—Å–µ–Ω", lang)
    text_disagree = slovar.get_dictionary("–ù–µ–î–∞—é–°–æ–≥–ª–∞—Å–∏—è", lang)

    keyboard = [
        [
            KeyboardButton(text=text_agree),
            KeyboardButton(text=text_disagree)
        ]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder=slovar.get_dictionary("–ü—Ä–æ—á–∏—Ç–∞—Ç—å–ü–æ–ª–∏—Ç–∏–∫—É–ë–æ—Ç–∞", lang)
    )

def get_inline_keyboard_sklad() -> InlineKeyboardMarkup:
    #data = http_request.get_http_skladi()
    #build_keyboard
    return True


def get_inline_keyboard_MyCodes() -> InlineKeyboardMarkup:
    data = http_request.get_http_MyCodes()
    return InlineKeyboardMarkup(inline_keyboard=data)

def create_inline_button(text: str, callback_data: str) -> InlineKeyboardButton:
    return InlineKeyboardButton(text=text, callback_data=callback_data)

def get_contact_request_keyboard(lang: str) -> ReplyKeyboardMarkup:
    contact_text = slovar.get_dictionary("–ö–Ω–æ–ø–∫–∞–û—Ç–ø—Ä–∞–≤–∫–∞–ù–æ–º–µ—Ä–∞–¢–µ–ª–µ—Ñ–æ–Ω–∞", lang)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=contact_text, request_contact=True)
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder=contact_text
    )
    return keyboard

def get_inline_keyboard_Kod(kods) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(kod), callback_data=f"kod_{kod}")] for kod in kods
    ])
    return keyboard

MONTHS = [
    "–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω",
    "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"
]

def get_period_keyboard(selected: list[tuple[int, int]], year: int) -> InlineKeyboardMarkup:
    keyboard = []

    # –í–µ—Ä—Ö–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º
    keyboard.append([
        InlineKeyboardButton(text='‚Üê', callback_data="year_prev"),
        InlineKeyboardButton(text=str(year), callback_data="noop"),
        InlineKeyboardButton(text="‚Üí", callback_data="year_next"),
    ])

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    sorted_sel = sorted(selected)
    if len(sorted_sel) == 2:
        y1, m1 = sorted_sel[0]
        y2, m2 = sorted_sel[1]
        def in_range(yy, mm):
            return (y1, m1) <= (yy, mm) <= (y2, m2)
    else:
        def in_range(yy, mm):
            return (yy, mm) in selected

    # –ú–µ—Å—è—Ü—ã
    row = []
    for i, month in enumerate(MONTHS, 1):
        if in_range(year, i):
            label = f"{month} ‚úÖ"
        else:
            label = month
        row.append(InlineKeyboardButton(text=label, callback_data=f"month_{i}_{year}"))
        if i % 3 == 0:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    keyboard.append([
        InlineKeyboardButton(text="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="submit_period")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
